{"version":3,"sources":["webpack.config.dev.js"],"names":[],"mappings":"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","file":"webpack.config.dev-compiled.js","sourcesContent":["'use strict';\n\nvar autoprefixer = require('autoprefixer');\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');\nvar InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');\nvar WatchMissingNodeModulesPlugin = require('react-dev-utils/WatchMissingNodeModulesPlugin');\nvar getClientEnvironment = require('./env');\nvar paths = require('./paths');\n\n\n\n\n// Webpack uses `publicPath` to determine where the app is being served from.\n// In development, we always serve from the root. This makes config easier.\nvar publicPath = '/';\n// `publicUrl` is just like `publicPath`, but we will provide it to our app\n// as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\n// Omit trailing slash as %PUBLIC_PATH%/xyz looks better than %PUBLIC_PATH%xyz.\nvar publicUrl = '';\n// Get environment variables to inject into our app.\nvar env = getClientEnvironment(publicUrl);\n\n// This is the development configuration.\n// It is focused on developer experience and fast rebuilds.\n// The production configuration is different and lives in a separate file.\nmodule.exports = {\n  // You may want 'eval' instead if you prefer to see the compiled output in DevTools.\n  // See the discussion in https://github.com/facebookincubator/create-react-app/issues/343.\n  devtool: 'cheap-module-source-map',\n  // These are the \"entry points\" to our application.\n  // This means they will be the \"root\" imports that are included in JS bundle.\n  // The first two entry points enable \"hot\" CSS and auto-refreshes for JS.\n  entry: [\n    // Include an alternative client for WebpackDevServer. A client's job is to\n    // connect to WebpackDevServer by a socket and get notified about changes.\n    // When you save a file, the client will either apply hot updates (in case\n    // of CSS changes), or refresh the page (in case of JS changes). When you\n    // make a syntax error, this client will display a syntax error overlay.\n    // Note: instead of the default WebpackDevServer client, we use a custom one\n    // to bring better experience for Create React App users. You can replace\n    // the line below with these two lines if you prefer the stock client:\n    require.resolve('webpack-dev-server/client') + '?/',\n    require.resolve('webpack/hot/dev-server'),\n    require.resolve('react-dev-utils/webpackHotDevClient'),\n    // We ship a few polyfills by default:\n    require.resolve('./polyfills'),\n    // Finally, this is your app's code:\n    paths.appIndexJs\n    // We include the app code last so that if there is a runtime error during\n    // initialization, it doesn't blow up the WebpackDevServer client, and\n    // changing JS code would still trigger a refresh.\n  ],\n  output: {\n    // Next line is not used in dev but WebpackDevServer crashes without it:\n    path: paths.appBuild,\n    // Add /* filename */ comments to generated require()s in the output.\n    pathinfo: true,\n    // This does not produce a real file. It's just the virtual path that is\n    // served by WebpackDevServer in development. This is the JS bundle\n    // containing code from all our entry points, and the Webpack runtime.\n    filename: 'static/js/bundle.js',\n    // This is the URL that app is served from. We use \"/\" in development.\n    publicPath: publicPath\n  },\n  resolve: {\n    // This allows you to set a fallback for where Webpack should look for modules.\n    // We read `NODE_PATH` environment variable in `paths.js` and pass paths here.\n    // We use `fallback` instead of `root` because we want `node_modules` to \"win\"\n    // if there any conflicts. This matches Node resolution mechanism.\n    // https://github.com/facebookincubator/create-react-app/issues/253\n    fallback: paths.nodePaths,\n    // These are the reasonable defaults supported by the Node ecosystem.\n    // We also include JSX as a common component filename extension to support\n    // some tools, although we do not recommend using it, see:\n    // https://github.com/facebookincubator/create-react-app/issues/290\n    extensions: ['.js', '.json', '.jsx', ''],\n    alias: {\n      // Support React Native Web\n      // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\n      'react-native': 'react-native-web'\n    }\n  },\n  \n  module: {\n    // First, run the linter.\n    // It's important to do this before Babel processes the JS.\n    preLoaders: [\n      {\n        test: /\\.(js|jsx)$/,\n        loader: 'eslint',\n        include: paths.appSrc,\n      }\n    ],\n    loaders: [\n      // ** ADDING/UPDATING LOADERS **\n      // The \"url\" loader handles all assets unless explicitly excluded.\n      // The `exclude` list *must* be updated with every change to loader extensions.\n      // When adding a new loader, you must add its `test`\n      // as a new entry in the `exclude` list for \"url\" loader.\n\n      // \"url\" loader embeds assets smaller than specified size as data URLs to avoid requests.\n      // Otherwise, it acts like the \"file\" loader.\n      {\n        exclude: [\n          /\\.html$/,\n          // We have to write /\\.(js|jsx)(\\?.*)?$/ rather than just /\\.(js|jsx)$/\n          // because you might change the hot reloading server from the custom one\n          // to Webpack's built-in webpack-dev-server/client?/, which would not\n          // get properly excluded by /\\.(js|jsx)$/ because of the query string.\n          // Webpack 2 fixes this, but for now we include this hack.\n          // https://github.com/facebookincubator/create-react-app/issues/1713\n          /\\.(js|jsx)(\\?.*)?$/,\n          /\\.css$/,\n          /\\.json$/,\n          /\\.svg$/,\n          /\\.scss$/  \n        ],\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: 'static/media/[name].[hash:8].[ext]'\n        }\n      },\n      // Process JS with Babel.\n      {\n        test: /\\.(js|jsx)$/,\n        include: paths.appSrc,\n        loader: 'babel',\n        query: {\n          \n          // This is a feature of `babel-loader` for webpack (not Babel itself).\n          // It enables caching results in ./node_modules/.cache/babel-loader/\n          // directory for faster rebuilds.\n          cacheDirectory: true\n        }\n      },\n      // \"postcss\" loader applies autoprefixer to our CSS.\n      // \"css\" loader resolves paths in CSS and adds assets as dependencies.\n      // \"style\" loader turns CSS into JS modules that inject <style> tags.\n      // In production, we use a plugin to extract that CSS to a file, but\n      // in development \"style\" loader enables hot editing of CSS.\n      {\n        test: /\\.css$/,\n        loader: 'style!css?importLoaders=1!postcss'\n      },\n      // JSON is not enabled by default in Webpack but both Node and Browserify\n      // allow it implicitly so we also enable it.\n      {\n        test: /\\.json$/,\n        loader: 'json'\n      },\n      // \"file\" loader for scss\n      {\n          test: /\\.scss$/,\n          loader: 'style!css!postcss!sass?outputStyle=expanded'\n\n      },\n      // \"file\" loader for svg\n      {\n        test: /\\.svg$/,\n        loader: 'file',\n        query: {\n          name: 'static/media/[name].[hash:8].[ext]'\n        }\n      },\n      // ** STOP ** Are you adding a new loader?\n      // Remember to add the new extension(s) to the \"url\" loader exclusion list.\n    ]\n  },\n  \n  // We use PostCSS for autoprefixing only.\n  postcss: function() {\n    return [\n      autoprefixer({\n        browsers: [\n          '>1%',\n          'last 4 versions',\n          'Firefox ESR',\n          'not ie < 9', // React doesn't support IE8 anyway\n        ]\n      })\n    ];\n  },\n  plugins: [\n    // Makes some environment variables available in index.html.\n    // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\n    // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    // In development, this will be an empty string.\n    new InterpolateHtmlPlugin(env.raw),\n    // Generates an `index.html` file with the <script> injected.\n    new HtmlWebpackPlugin({\n      inject: true,\n      template: paths.appHtml,\n    }),\n    // Makes some environment variables available to the JS code, for example:\n    // if (process.env.NODE_ENV === 'development') { ... }. See `./env.js`.\n    new webpack.DefinePlugin(env.stringified),\n    // This is necessary to emit hot updates (currently CSS only):\n    new webpack.HotModuleReplacementPlugin(),\n    // Watcher doesn't work well if you mistype casing in a path so we use\n    // a plugin that prints an error when you attempt to do this.\n    // See https://github.com/facebookincubator/create-react-app/issues/240\n    new CaseSensitivePathsPlugin(),\n    // If you require a missing module and then `npm install` it, you still have\n    // to restart the development server for Webpack to discover it. This plugin\n    // makes the discovery automatic so you don't have to restart.\n    // See https://github.com/facebookincubator/create-react-app/issues/186\n    new WatchMissingNodeModulesPlugin(paths.appNodeModules)\n  ],\n  // Some libraries import Node modules but don't use them in the browser.\n  // Tell Webpack to provide empty mocks for them so importing them works.\n  node: {\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty'\n  }\n};\n"]}